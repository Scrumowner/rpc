version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - mylocal

  kafka:
      image: wurstmeister/kafka:latest
      container_name: kafka
      ports:
        - "9092:9092"
      expose:
        - "9093"
      environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      depends_on:
        - zookeeper
      networks:
        - mylocal

  rabit:
    image: rabbitmq:3-managment-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    restart: on-failure
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/
    networks:
      - mylocal
  hugo:
    image: klakegg/hugo:0.101.0-ext-alpine
    container_name: hugo
    command: server
    entrypoint: hugo
    volumes:
      - "./hugo:/src"
    ports:
      - ${HUGO_PORT}:${HUGO_PORT}
    networks:
      - mylocal
  db:
    image: postgres:14.4
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      -  ./postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - mylocal
  cache:
    image: redis:latest
    container_name: cache
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - mylocal
  proxy:
    build: ./proxy
    container_name: proxy
    ports:
      - ${PORXY_PORT}:${PORXY_PORT}
    restart: on-failure
    networks:
      - mylocal
  user_service:
    build: ./user_service
    container_name: user_service
    ports:
      - ${USER_PORT}:${USER_PORT}
    restart: on-failure
    networks:
      - mylocal
  auth:
      build: ./auth
      container_name: auth
      ports:
        - ${AUTH_PORT}:${AUTH_PORT}
      restart: on-failure
      networks:
        - mylocal
  geo:
    build: ./geo
    container_name: geo
    ports:
      - ${GEO_PORT}:${GEO_PORT}
    depends_on:
      - db
      - cache
    restart: on-failure
    networks:
      - mylocal
networks:
  mylocal:
    driver: bridge
